/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
	behaviors {
		ltp: behavior_layer_tap_permissive {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TAP_PERMISSIVE";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping_term_ms = <150>;
			bindings = <&mo>, <&kp>;
		};
	};
};

/ {
    behaviors {
        mtp: bevavior_mod_tap_permissive {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_PERMISSIVE";
            #binding-cells = <2>;
            tapping_term_ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
};

#define RSFT_FSLH &mtp RSFT FSLH
#define MEH LC(LA(LSFT))
#define HYPER LS(MEH)

#define colemak_layer 1
#define COLEMAK &mo colemak_layer

#define sym_layer 2
#define SYMFN(kp) &ltp sym_layer kp

#define nav_layer 3
#define NAVFN(kp) &lt nav_layer kp

#define num_layer 4
#define NUMFN(kp) &lt num_layer kp

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB      &kp Q       &kp W &kp E &kp R &kp T   &kp Y &kp U &kp I    &kp O    &kp P       &kp BKSP
   &mt LCTL ESC &kp A       &kp S &kp D &kp F &kp G   &kp H &kp J &kp K    &kp L    SYMFN(SCLN) &kp SQT
   &kp LSFT     &mtp LSFT Z &kp X &kp C &kp V &kp B   &kp N &kp M &kp CMMA &kp DOT  RSFT_FSLH   &mt RSFT RET
              &kp LALT  &mt LGUI SPC  &mo num_layer   NUMFN(RET)  NAVFN(SPC)  COLEMAK
                        >;
                };

                colemak_layer {
                        bindings = <
   &trans       &kp Q       &kp W &kp F &kp P &kp B   &kp J &kp L &kp U    &kp Y    &kp SCLN    &trans
   &trans       &kp A       &kp R &kp S &kp T &kp G   &kp M &kp N &kp E    &kp I    SYMFN(O)    &trans
   &trans       &mtp LSFT Z &kp X &kp C &kp D &kp V   &kp K &kp H &trans   &trans   &trans      &trans
                             &trans  &trans  &trans   &trans  &trans  &none
                        >;
                };

                sym_layer {
                        bindings = <
   &trans &kp DLLR &kp LPAR &kp RPAR &trans   &trans   &trans &kp PIPE &kp MINUS &kp EQUAL &trans &trans
   &trans &kp LBKT &kp RBKT &kp LBRC &kp RBRC &trans   &trans &kp BKSP &kp SQT   &kp DQT   &trans &trans
   &trans &trans   &trans   &trans   &trans   &trans   &trans &kp DEL  &kp UNDER &trans    &trans &trans
                                &trans &trans &trans   &trans &trans &trans
                        >;
                };

                nav_layer {
                        bindings = <
   &trans   &trans   &trans   &kp PG_UP &trans   &trans     &trans   &kp HOME &kp UP   &kp PG_UP &trans   &kp DEL
   &trans   &trans   &kp HOME &kp PG_DN &kp END  &trans     &trans   &kp LEFT &kp DOWN &kp RIGHT &trans   &trans
   &trans   &trans   &trans   &trans    &trans   &trans     &trans   &kp END  &trans   &kp PG_DN &trans   &trans
                                   &trans &trans &trans     &trans &trans &trans
                        >;
                };

                num_layer {
                        bindings = <
   &kp GRAV &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT  &kp CRRT &kp AMPS &kp STAR  &kp LPAR  &kp RPAR &trans
   &reset   &trans   &trans   &trans   &kp N0   &trans     &trans   &kp N1   &kp MINUS &kp EQUAL &kp BSLH &reset
   &trans   &kp N9   &kp N8   &kp N7   &kp N6   &kp N0     &kp N1   &kp N2   &kp N3    &kp N4    &kp N5   &trans
                                  &trans &trans &trans     &trans &trans &trans
                        >;
                };
/*
                empty_layer {
                        bindings = <
   &trans   &trans   &trans   &trans   &trans   &trans     &trans   &trans   &trans   &trans   &trans   &trans
   &trans   &trans   &trans   &trans   &trans   &trans     &trans   &trans   &trans   &trans   &trans   &trans
   &trans   &trans   &trans   &trans   &trans   &trans     &trans   &trans   &trans   &trans   &trans   &trans
                                  &trans &trans &trans     &trans &trans &trans
                        >;
                };
*/

        };
};

